# Copyright (C) 2024 quip.network
# SPDX-License-Identifier: AGPL-3.0-or-later

name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4

      - name: Clean any existing build artifacts
        shell: bash
        run: |
          rm -rf build/ dist/ *.egg-info/ hashsigs/_rust*.so hashsigs/_rust*.pyd hashsigs/__pycache__/
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          # Build for Python 3.8-3.13 on all platforms
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*
          # Skip 32-bit builds and musl builds for now
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
          # Install Rust for building the extension
          CIBW_BEFORE_ALL_LINUX: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && source ~/.cargo/env"
          CIBW_BEFORE_ALL_MACOS: "rustup target add aarch64-apple-darwin x86_64-apple-darwin"
          CIBW_BEFORE_ALL_WINDOWS: "rustup target add x86_64-pc-windows-msvc"
          # Set environment variable to ensure Rust extension builds
          CIBW_ENVIRONMENT: "HASHSIGS_BUILD_RUST=1"
          # Handle auditwheel repair for Rust extensions - use --strip to remove debug info
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair --strip -w {dest_dir} {wheel}"
          # Test that the wheel works
          CIBW_TEST_REQUIRES: pytest pycryptodome
          CIBW_TEST_COMMAND: "python -c 'import hashsigs; print(\"Package imported successfully\")' && pytest {project}/tests/test_basic.py -v"
      
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build sdist
        run: pipx run build --sdist
      
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload-pypi:
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.test_pypi == 'true' && 'testpypi' || 'pypi' }}
      url: ${{ github.event.inputs.test_pypi == 'true' && 'https://test.pypi.org/p/hashsigs' || 'https://pypi.org/p/hashsigs' }}
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      
      - name: Publish to Test PyPI
        if: github.event.inputs.test_pypi == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
      
      - name: Publish to PyPI
        if: github.event.inputs.test_pypi != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
